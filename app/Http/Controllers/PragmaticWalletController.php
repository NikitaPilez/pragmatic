<?php

namespace App\Http\Controllers;

use App\Http\Player;
use App\Http\Requests\AuthenticateRequest;
use App\Http\Requests\BetRequest;
use App\Http\Requests\GetBalanceRequest;
use App\Http\Requests\ResultRequest;
use App\Services\PragmaticErrorCodesService;
use App\Services\PragmaticServiceInterface;
use Illuminate\Http\JsonResponse;

class PragmaticWalletController extends Controller
{
    private $pragmaticServiceInterface;
    public function __construct(PragmaticServiceInterface $pragmaticServiceInterface)
    {
        $this->pragmaticServiceInterface = $pragmaticServiceInterface;
    }

    /**
     * 3.4 When the game is opening Pragmatic Play receives with URL security token generated by Casino Operator. Using this token
     * Pragmatic Play will ask Casino Operator for player authentication and get the playerâ€™s balance.
     *
     * @param AuthenticateRequest $request
     * @return JsonResponse
     */
    public function authenticate(AuthenticateRequest $request): JsonResponse
    {
        logger()->channel('pragmatic')->info('Authenticate', $request->all());

        /** @var Player $player */
        $player = $this->pragmaticServiceInterface->getPlayerByToken($request->input('token'));

        if (! $player) {
            return response()->json([
                'error' => PragmaticErrorCodesService::getAuthenticationFailedCode(),
                'description' => 'Invalid or expired or not found token',
            ]);
        }

        if ($player->balance <= 0 && $player->bonus <= 0) {
            return response()->json([
                'error' => PragmaticErrorCodesService::getInsufficientBalanceCode(),
                'description' => 'Insufficient balance',
            ]);
        }

        if ($player->is_banned) {
            return response()->json([
                'error' => PragmaticErrorCodesService::getPlayerFrozenCode(),
                'description' => 'Player is frozen',
            ]);
        }

        return $this->successResponse([
            'userId' => $player->user_id,
            'currency' => $player->currency,
            'cash' => $player->balance,
            'bonus' => $player->bonus
        ]);
    }

    /**
     * 3.5 Balance
     * Using this method a Pragmatic Play system will know a current balance of player and will show it in the game.
     *
     * @param GetBalanceRequest $request
     * @return JsonResponse
     */
    public function balance(GetBalanceRequest $request): JsonResponse
    {
        logger()->channel('pragmatic')->info('Balance', $request->all());

        /** @var Player $player */
        $player = $this->pragmaticServiceInterface->getPlayerByUserId($request->input('userId'));

        if (! $player) {
            return response()->json([
                'error' => PragmaticErrorCodesService::getPlayerNotFoundCode(),
                'description' => 'Player not found',
            ]);
        }

        return $this->successResponse([
            'currency' => $player->currency,
            'cash' => $player->balance,
            'bonus' => $player->bonus,
        ]);
    }

    /**
     * 3.6 Bet
     * Using this method Pragmatic Play system will check the player balance on Casino Operator side to ensure they still have the
     * funds to cover the bet. Amount of the bet must be subtracted from player balance in Casino Operator system.
     *
     * @param BetRequest $request
     * @return JsonResponse
     */
    public function bet(BetRequest $request): JsonResponse
    {
        logger()->channel('pragmatic')->info('Bet', $request->all());

        /** @var Player $player */
        $player = $this->pragmaticServiceInterface->getPlayerByUserId($request->input('userId'));

        if (! $player) {
            return response()->json([
                'error' => PragmaticErrorCodesService::getPlayerNotFoundCode(),
                'description' => 'Player not found',
            ]);
        }

        $player = $this->pragmaticServiceInterface->processedBet($player, $request->input('amount'));

        return $this->successResponse([
            'transactionId' => rand(10000, 10000000),
            'currency' => $player->currency,
            'cash' => $player->balance,
            'bonus' => $player->bonus,
            'usedPromo' => 0.00
        ]);
    }

    /**
     * 3.7 Result
     * Using this method the Pragmatic Play system will send to Casino Operator the winning result of a bet.
     * The Casino Operator will change the balance of the player
     * in accordance with this request and return the updated balance.
     *
     * @param ResultRequest $request
     * @return JsonResponse
     */
    public function result(ResultRequest $request): JsonResponse
    {
        logger()->channel('pragmatic')->info('Result', $request->all());

        /** @var Player $player */
        $player = $this->pragmaticServiceInterface->getPlayerByUserId($request->input('userId'));

        if (! $player) {
            return response()->json([
                'error' => PragmaticErrorCodesService::getPlayerNotFoundCode(),
                'description' => 'Player not found',
            ]);
        }

        $player = $this->pragmaticServiceInterface->processedWinBet($player, $request->input('amount'));

        return $this->successResponse([
            'transactionId' => rand(10000, 10000000),
            'currency' => $player->currency,
            'cash' => $player->balance,
            'bonus' => $player->bonus,
        ]);
    }

    private function successResponse(array $data = []): JsonResponse
    {
        return response()->json(array_merge([
            'error' => PragmaticErrorCodesService::getSuccessCode(),
            'description' => 'OK'
        ], $data));
    }
}
